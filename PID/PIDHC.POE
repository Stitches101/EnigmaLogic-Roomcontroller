PROGRAM PIDHC
VAR_EXTERNAL
SI01 : real;
SI02 : real;
SI03 : real;
SI04 : real;

HE01 : BOOL;
CO01 : BOOL;

PI01 : real;
PI02 : real;
PI03 : real;
PI04 : real;

DisplayAddress : usint;
DisplayPoint1 : real;
DisplayPoint8 : real;
DisplayPoint10 : real;

END_VAR


VAR
PID_CONTROL : PIDFB ; (* The functionblock type: PIDFB *)
Output_1 : REAL ;
Output_2 : REAL ;
Result : int;
Result2 : real;
Result3 : real;
SetpointRT : real;
Roomtemp : real;
END_VAR
(**  **)
(** {*-------------------------------------------------------------------------------------------------------------------------------------*} **)
(** {* SET RT + ADJUST *} **)
(** Result2 := SI01; **)
	(* assign - Stmt *)
	LD SI01
	ST Result2

(** Result3 := GetDisplayPointValueF(PointNumber:=2, SlaveAddress:=DisplayAddress, OldValue:=Result3); **)
	(* assign - Stmt *)
	LD 2
	GetDisplayPointValueF DisplayAddress, Result3
	ST Result3

(**  **)
(**  **)
(** IF GetRegisterF(RegNumber:=524) <> 0 THEN **)
	(* if - Cond *)
	LD 524
	GetRegisterF 
	NE 0
	JMPCN ODK_SKIP_000000000000001_000000000000001

		(* then - Stmts *)

(** 	Result3 :=0.0; **)
		(* assign - Stmt *)
		LD 0.0
		ST Result3

(** 	Result := SetDisplayPointF(PointNumber:=2, PointType:=0, PointUnit:=0, SlaveAddress:=DisplayAddress, PointValue:=Result3 ); **)
		(* assign - Stmt *)
		LD 2
		SetDisplayPointF 0, 0, DisplayAddress, Result3
		ST Result

(** 	Result := SetRegisterF(RegNumber := 524, RegValue := 0); **)
		(* assign - Stmt *)
		LD 524
		SetRegisterF 0
		ST Result

		JMP ODK_END_IF_000000000000001

(** END_IF; **)
	(* if - End *) 
	ODK_SKIP_000000000000001_000000000000001:
	ODK_END_IF_000000000000001:

(**  **)
(** {* POINT1: SET RT -> PIDHC *} **)
(** SetpointRT := GetDisplayPointValueF(PointNumber:=1, SlaveAddress:=DisplayAddress, OldValue:=SetpointRT); **)
	(* assign - Stmt *)
	LD 1
	GetDisplayPointValueF DisplayAddress, SetpointRT
	ST SetpointRT

(** SetpointRT := Result2 + Result3; **)
	(* assign - Stmt *)
	LD Result2
	ADD Result3
	ST SetpointRT

(** Result := SetDisplayPointF(PointNumber:=1, PointType:=1, PointUnit:=1, SlaveAddress:=DisplayAddress, PointValue:=SetpointRT ); **)
	(* assign - Stmt *)
	LD 1
	SetDisplayPointF 1, 1, DisplayAddress, SetpointRT
	ST Result

(**  **)
(** {*-------------------------------------------------------------------------------------------------------------------------------------*} **)
(** {* POINT10: RT + Damping*} **)
(** DisplayPoint10 := GetDisplayPointValueF(PointNumber:=10, SlaveAddress:=DisplayAddress, OldValue:=DisplayPoint10); **)
	(* assign - Stmt *)
	LD 10
	GetDisplayPointValueF DisplayAddress, DisplayPoint10
	ST DisplayPoint10

(** Roomtemp := WORD_TO_REAL(GetRegisterF(RegNumber:=1013))/10.0; **)
	(* assign - Stmt *)
	LD 1013
	GetRegisterF 
	WORD_TO_REAL 
	DIV 10.0
	ST Roomtemp

(**  **)
(**  **)
(** IF (SetpointRT  - 0.3) < Roomtemp AND (SetpointRT  + 0.3) > Roomtemp THEN **)
	(* if - Cond *)
	LD SetpointRT
	SUB 0.3
	LT Roomtemp
	AND ( SetpointRT
		ADD 0.3
		GT Roomtemp
	)
	JMPCN ODK_SKIP_000000000000002_000000000000001

		(* then - Stmts *)

(** 	Roomtemp := SetpointRT; **)
		(* assign - Stmt *)
		LD SetpointRT
		ST Roomtemp

		JMP ODK_END_IF_000000000000002

(** END_IF; **)
	(* if - End *) 
	ODK_SKIP_000000000000002_000000000000001:
	ODK_END_IF_000000000000002:

(**  **)
(** Result := SetDisplayPointF(PointNumber:=10, PointType:=1, PointUnit:=0, SlaveAddress:=DisplayAddress, PointValue:=Roomtemp); **)
	(* assign - Stmt *)
	LD 10
	SetDisplayPointF 1, 0, DisplayAddress, Roomtemp
	ST Result

(** {*-------------------------------------------------------------------------------------------------------------------------------------*} **)
(**  **)
(** PID_CONTROL.measurement := WORD_TO_REAL(GetRegisterF(RegNumber:=1013))/10.0; **)
	(* assign - Stmt *)
	LD 1013
	GetRegisterF 
	WORD_TO_REAL 
	DIV 10.0
	ST PID_CONTROL.measurement

(** PID_CONTROL.setpoint := SetpointRT ; **)
	(* assign - Stmt *)
	LD SetpointRT
	ST PID_CONTROL.setpoint

(** PID_CONTROL.stages := 2; {* INT, between 1 and 6 *} **)
	(* assign - Stmt *)
	LD 2
	ST PID_CONTROL.stages

(** PID_CONTROL.balance := 1; {* INT, between 0 and 6 *} **)
	(* assign - Stmt *)
	LD 1
	ST PID_CONTROL.balance

(** PID_CONTROL.deadzone := 0.5 ; {* REAL *} **)
	(* assign - Stmt *)
	LD 0.5
	ST PID_CONTROL.deadzone

(** PID_CONTROL.comfort := 0.1; {* REAL *} **)
	(* assign - Stmt *)
	LD 0.1
	ST PID_CONTROL.comfort

(** PID_CONTROL.min1 := 0; {* INT, between 0 and 100 *} **)
	(* assign - Stmt *)
	LD 0
	ST PID_CONTROL.min1

(** PID_CONTROL.max1 := 100; {* INT, between 0 and 100 *} **)
	(* assign - Stmt *)
	LD 100
	ST PID_CONTROL.max1

(** PID_CONTROL.min2 := 0; {* INT, between 0 and 100 *} **)
	(* assign - Stmt *)
	LD 0
	ST PID_CONTROL.min2

(** PID_CONTROL.max2 := 100; {* INT, between 0 and 100 *} **)
	(* assign - Stmt *)
	LD 100
	ST PID_CONTROL.max2

(** PID_CONTROL.pband1 := 20.0; {* REAL, bigger than 0 *} **)
	(* assign - Stmt *)
	LD 20.0
	ST PID_CONTROL.pband1

(** PID_CONTROL.pband2 := 20.0; {* REAL, bigger than 0 *} **)
	(* assign - Stmt *)
	LD 20.0
	ST PID_CONTROL.pband2

(** PID_CONTROL.iTime := 120; {* INT, seconds, bigger than 0 *} **)
	(* assign - Stmt *)
	LD 120
	ST PID_CONTROL.iTime

(** PID_CONTROL.dTime := 0; {* INT, seconds *} **)
	(* assign - Stmt *)
	LD 0
	ST PID_CONTROL.dTime

(** {* calling the execution of the functionblock *} **)
(** PID_CONTROL(); **)
	(* call - Stmt *)
	CAL PID_CONTROL

(**  **)
(**  **)
(** {* Heater *} **)
(** PI02 := PID_CONTROL.out2 ; {* returns a REAL *} {*AO01 Heating*} **)
	(* assign - Stmt *)
	LD PID_CONTROL.out2
	ST PI02

(**  **)
(** {* Cooler  *} **)
(** PI03 := PID_CONTROL.out1 ; {* returns a REAL *} {*AO02 Cooling*} **)
	(* assign - Stmt *)
	LD PID_CONTROL.out1
	ST PI03


END_PROGRAM